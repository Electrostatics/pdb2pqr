[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.version]
source = "code"
path = "pdb2pqr/_version.py"
# expression = "__version__"  # default

[tool.hatch.build.targets.sdist]
include = [
  "pdb2pqr",
  "docs",
  "examples",
  "tests",
]

[tool.hatch.build.targets.wheel]
packages = ["pdb2pqr"]

[project]
name = "pdb2pqr"
dynamic = ["version"]
description = """
Automates many of the common tasks of preparing structures for \
continuum solvation calculations as well as many other types of \
biomolecular structure modeling, analysis, and simulation."""
authors = [
  { name = "Jens Erik Nielsen" },
  { name = "Nathan Baker", email = "nathanandrewbaker@gmail.com" },
]
readme = "README.md"
license = { file = "LICENSE.md" }
# NOTE: make sure you change [tool.pyright] pythonVersion to match this
requires-python = ">=3.11,<4"
classifiers = [
  "Development Status :: 4 - Beta",
  "Environment :: Console",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: BSD License",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: Microsoft :: Windows",
  "Operating System :: POSIX",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Scientific/Engineering :: Bio-Informatics",
  "Topic :: Scientific/Engineering :: Chemistry",
]
keywords = ["science", "chemistry", "molecular biology"]

dependencies = [
  "mmcif_pdbx>=1.1.2",
  "numpy",
  "propka >= 3.5",
  "requests",
  "docutils < 0.18",
]

[project.optional-dependencies]
dev = ["check-manifest"]
test = [
  "ruff",
  "coverage",
  "pandas >= 1.0",
  "pytest",
  "testfixtures",
]

[project.urls]
"Homepage" = "https://www.poissonboltzmann.org"
"Documentation"= "https://pdb2pqr.readthedocs.io/"
"Get help"= "https://github.com/Electrostatics/pdb2pqr/issues"
"Publications"= "https://pubmed.ncbi.nlm.nih.gov/?term=R01+GM069702"
"Funding"= "https://bit.ly/apbs-funding"
"Source"= "https://github.com/Electrostatics/pdb2pqr"

[project.scripts]
pdb2pqr = "pdb2pqr.main:main"
pdb2pqr30 = "pdb2pqr.main:main"
dx2cube = "pdb2pqr.main:dx_to_cube"
inputgen = "pdb2pqr.inputgen:main"


[tool.pytest.ini_options]
testpaths = ["tests"]
log_cli = true
log_cli_level = "INFO"

markers = """
    long_test: marks tests as long (select with '-m "long_test"')
    serial
"""

[tool.coverage.run]
source = ["pdb2pqr"]
omit = [
  "tests/",
]

[tool.pyright]
typeCheckingMode = "standard"
useLibraryCodeForTypes = true
autoImportCompletions = true

pythonVersion = "3.11"
# pythonPlatform = "Linux"

reportDuplicateImport = true

[tool.ruff]
namespace-packages = ["tests"]  # for INP rule, suppress on these directories
line-length = 79

[tool.ruff.lint]
# OPTIONALLY ADD MORE LATER
select = [
  # flake8
  "E",
  "F",
  "W",
  "B",    # Bugbear
  "D",    # Docstring
  "N",    # Naming
  "C4",   # flake8-comprehensions
  "UP",   # pyupgrade
  "SIM",  # simplify
  "RUF",  # ruff-specific
  "RET501",  # return
  "RET502",  # return
  "PTH",  # path
  "NPY",  # numpy
  "PD",   # pandas
  "PYI",  # type stubs for pyright/pylance
  "PT",   # pytest
  "PIE",  #
  "LOG",  # logging
  "COM818",  # comma misplaced
  "COM819",  # comma
  "DTZ",  # datetime
  "YTT",
  "ASYNC",
  "FBT",  # boolean trap
  "A",    # Shadowing python builtins
  "EXE",  # executable (shebang)
  "FA",   # future annotations
  "ISC",  # Implicit string concatenation
  "ICN",  # Import convention 
  "INP",  # Implicit namespace package (no __init__.py)
  "Q",    # Quotes
  "RSE",  # raise
  "SLOT", # __slots__
  "PL",   # Pylint
  "TRY",  # try
  "FAST", # FastAPI
  "AIR",  # airflow
  "DOC",  # docstring
  "TID",  # tidy-imports

  # Not important
  "T20",  # print statements
]

ignore = [
  "E402",    # Module level import not at top of file
  "W293",    # Blank line contains whitespace
  "W291",    # Trailing whitespace
  "D10",     # Missing docstring in public module / function / etc.
  "D200",    # One-line docstring should fit on one line with quotes
  "D417",    # require documentation for every function parameter.
  "D400",    # First line should end with a period
  "D401",    # require an imperative mood for all docstrings.
  "DOC201",  # missing Return field in docstring
  "PTH123",  # Path.open should be used instead of built-in open
  "PT006",   # Pytest parameterize style
  "N812",    # Lowercase `functional` imported as non-lowercase `F` (import torch.nn.functional as F)
  "NPY002",  # legacy numpy random
  "UP017",   # datetime.timezone.utc -> datetime.UTC
  "SIM108",  # use ternary operator instead of if-else
  "TRY003",  # long message in except
  "PLR2004", # magic value comparison
]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = [
    "F401", # Ignore seemingly unused imports (they're meant for re-export)
]

[tool.ruff.lint.pydocstyle]
convention = "pep257"

[tool.ruff.lint.pycodestyle]
# ruff formatter will enforce line length to be 79, except for docstrings and comments.
# We set it to 120 so we have more space for docstrings and comments.
max-line-length = 120

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"os.system".msg = "Use subprocess.run or subprocess.Popen instead"

[tool.ruff.lint.pylint]
max-args = 10
max-bool-expr = 10
max-statements = 100
max-returns = 10
max-public-methods = 30
max-nested-blocks = 10
max-locals = 30
max-branches = 24
